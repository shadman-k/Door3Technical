{"ast":null,"code":"var _jsxFileName = \"E:\\\\PracWebDev\\\\FinalProject\\\\frontend\\\\FinalProject-FrontEnd\\\\src\\\\components\\\\containers\\\\AllCampusesContainer.js\";\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\nimport { AllCampusesView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllCampusesContainer extends Component {\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllCampuses();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(AllCampusesView, {\n      campuses: this.props.allCampuses,\n      deleteCampus: this.props.deleteCampus,\n      deleteCampuses: this.props.deleteCampuses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Map state to props;\n\n\nconst mapState = state => {\n  return {\n    allCampuses: state.allCampuses\n  };\n}; // Map dispatch to props;\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    deleteCampuses: campuses => campuses.map(campus => dispatch(deleteCampusThunk(campus.id)))\n  };\n}; // Type check props;\n\n\nAllCampusesContainer.propTypes = {\n  allCampuses: PropTypes.array.isRequired,\n  fetchAllCampuses: PropTypes.func.isRequired\n}; // Export our store-connected container by default;\n\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","map":{"version":3,"sources":["E:/PracWebDev/FinalProject/frontend/FinalProject-FrontEnd/src/components/containers/AllCampusesContainer.js"],"names":["Component","PropTypes","connect","fetchAllCampusesThunk","deleteCampusThunk","AllCampusesView","AllCampusesContainer","componentDidMount","console","log","props","fetchAllCampuses","render","allCampuses","deleteCampus","deleteCampuses","mapState","state","mapDispatch","dispatch","id","campuses","map","campus","propTypes","array","isRequired","func"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,EAAgCC,iBAAhC,QAAyD,oBAAzD;AACA,SAASC,eAAT,QAAgC,UAAhC;;;AAEA,MAAMC,oBAAN,SAAmCN,SAAnC,CAA6C;AAC3CO,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,SAAKA,KAAL,CAAWC,gBAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,eAAD;AACE,MAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,WADvB;AAEE,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,YAF3B;AAGE,MAAA,cAAc,EAAE,KAAKJ,KAAL,CAAWK;AAH7B;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAd0C,C,CAiB7C;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLJ,IAAAA,WAAW,EAAEI,KAAK,CAACJ;AADd,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLR,IAAAA,gBAAgB,EAAE,MAAMQ,QAAQ,CAAChB,qBAAqB,EAAtB,CAD3B;AAELW,IAAAA,YAAY,EAAGM,EAAD,IAAQD,QAAQ,CAACf,iBAAiB,CAACgB,EAAD,CAAlB,CAFzB;AAGLL,IAAAA,cAAc,EAAGM,QAAD,IACdA,QAAQ,CAACC,GAAT,CAAcC,MAAD,IAAYJ,QAAQ,CAACf,iBAAiB,CAACmB,MAAM,CAACH,EAAR,CAAlB,CAAjC;AAJG,GAAP;AAMD,CAPD,C,CASA;;;AACAd,oBAAoB,CAACkB,SAArB,GAAiC;AAC/BX,EAAAA,WAAW,EAAEZ,SAAS,CAACwB,KAAV,CAAgBC,UADE;AAE/Bf,EAAAA,gBAAgB,EAAEV,SAAS,CAAC0B,IAAV,CAAeD;AAFF,CAAjC,C,CAKA;;AACA,eAAexB,OAAO,CAACc,QAAD,EAAWE,WAAX,CAAP,CAA+BZ,oBAA/B,CAAf","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk, deleteCampusThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AllCampusesView\r\n        campuses={this.props.allCampuses}\r\n        deleteCampus={this.props.deleteCampus}\r\n        deleteCampuses={this.props.deleteCampuses}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Map state to props;\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,\r\n  };\r\n};\r\n\r\n// Map dispatch to props;\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\r\n    deleteCampuses: (campuses) =>\r\n      campuses.map((campus) => dispatch(deleteCampusThunk(campus.id))),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export our store-connected container by default;\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);\r\n"]},"metadata":{},"sourceType":"module"}