{"ast":null,"code":"var _jsxFileName = \"E:\\\\PracWebDev\\\\FinalProject\\\\frontend\\\\FinalProject-FrontEnd\\\\src\\\\components\\\\containers\\\\AllAuthorsContainer.js\";\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { fetchAllAuthorsThunk, deleteAuthorThunk } from \"../../store/thunks\";\nimport { AllAuthorsView } from \"../views\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllAuthorsContainer extends Component {\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchAllAuthors();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(AllAuthorsView, {\n      authors: this.props.allAuthors,\n      deleteAuthor: this.props.deleteAuthor,\n      deleteAuthors: this.props.deleteAuthors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Map state to props;\n\n\nconst mapState = state => {\n  return {\n    allAuthors: state.allAuthors\n  };\n}; // Map dispatch to props;\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchAllAuthors: () => dispatch(fetchAllAuthorsThunk()),\n    deleteAuthor: id => dispatch(deleteAuthorThunk(id)),\n    deleteAuthors: authors => authors.map(author => dispatch(deleteAuthorThunk(author.id)))\n  };\n}; // Type check props;\n\n\nAllAuthorsContainer.propTypes = {\n  allAuthors: PropTypes.array.isRequired,\n  fetchAllAuthors: PropTypes.func.isRequired\n}; // Export our store-connected container by default;\n\nexport default connect(mapState, mapDispatch)(AllAuthorsContainer);","map":{"version":3,"sources":["E:/PracWebDev/FinalProject/frontend/FinalProject-FrontEnd/src/components/containers/AllAuthorsContainer.js"],"names":["Component","PropTypes","connect","fetchAllAuthorsThunk","deleteAuthorThunk","AllAuthorsView","AllAuthorsContainer","componentDidMount","console","log","props","fetchAllAuthors","render","allAuthors","deleteAuthor","deleteAuthors","mapState","state","mapDispatch","dispatch","id","authors","map","author","propTypes","array","isRequired","func"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,oBAAT,EAA+BC,iBAA/B,QAAwD,oBAAxD;AACA,SAASC,cAAT,QAA+B,UAA/B;;;AAEA,MAAMC,mBAAN,SAAkCN,SAAlC,CAA4C;AAC1CO,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,SAAKA,KAAL,CAAWC,eAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,cAAD;AACE,MAAA,OAAO,EAAE,KAAKF,KAAL,CAAWG,UADtB;AAEE,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWI,YAF3B;AAGE,MAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWK;AAH5B;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAdyC,C,CAiB5C;;;AACA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLJ,IAAAA,UAAU,EAAEI,KAAK,CAACJ;AADb,GAAP;AAGD,CAJD,C,CAMA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;AAChC,SAAO;AACLR,IAAAA,eAAe,EAAE,MAAMQ,QAAQ,CAAChB,oBAAoB,EAArB,CAD1B;AAELW,IAAAA,YAAY,EAAGM,EAAD,IAAQD,QAAQ,CAACf,iBAAiB,CAACgB,EAAD,CAAlB,CAFzB;AAGLL,IAAAA,aAAa,EAAGM,OAAD,IACbA,OAAO,CAACC,GAAR,CAAaC,MAAD,IAAYJ,QAAQ,CAACf,iBAAiB,CAACmB,MAAM,CAACH,EAAR,CAAlB,CAAhC;AAJG,GAAP;AAMD,CAPD,C,CASA;;;AACAd,mBAAmB,CAACkB,SAApB,GAAgC;AAC9BX,EAAAA,UAAU,EAAEZ,SAAS,CAACwB,KAAV,CAAgBC,UADE;AAE9Bf,EAAAA,eAAe,EAAEV,SAAS,CAAC0B,IAAV,CAAeD;AAFF,CAAhC,C,CAKA;;AACA,eAAexB,OAAO,CAACc,QAAD,EAAWE,WAAX,CAAP,CAA+BZ,mBAA/B,CAAf","sourcesContent":["import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllAuthorsThunk, deleteAuthorThunk } from \"../../store/thunks\";\r\nimport { AllAuthorsView } from \"../views\";\r\n\r\nclass AllAuthorsContainer extends Component {\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllAuthors();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AllAuthorsView\r\n        authors={this.props.allAuthors}\r\n        deleteAuthor={this.props.deleteAuthor}\r\n        deleteAuthors={this.props.deleteAuthors}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Map state to props;\r\nconst mapState = (state) => {\r\n  return {\r\n    allAuthors: state.allAuthors,\r\n  };\r\n};\r\n\r\n// Map dispatch to props;\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllAuthors: () => dispatch(fetchAllAuthorsThunk()),\r\n    deleteAuthor: (id) => dispatch(deleteAuthorThunk(id)),\r\n    deleteAuthors: (authors) =>\r\n      authors.map((author) => dispatch(deleteAuthorThunk(author.id))),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllAuthorsContainer.propTypes = {\r\n  allAuthors: PropTypes.array.isRequired,\r\n  fetchAllAuthors: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export our store-connected container by default;\r\nexport default connect(mapState, mapDispatch)(AllAuthorsContainer);\r\n"]},"metadata":{},"sourceType":"module"}